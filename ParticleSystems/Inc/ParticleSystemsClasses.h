/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef PARTICLESYSTEMS_API
#define PARTICLESYSTEMS_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern PARTICLESYSTEMS_API FName PARTICLESYSTEMS_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(TurnOn)
AUTOGENERATE_NAME(TurnOff)
AUTOGENERATE_NAME(AddForce)
AUTOGENERATE_NAME(RemoveForce)
AUTOGENERATE_NAME(RemoveForceType)
AUTOGENERATE_NAME(AddTemplate)
AUTOGENERATE_NAME(RemoveTemplate)
AUTOGENERATE_NAME(RemoveTemplateType)
AUTOGENERATE_NAME(GetParticleTemplates)
AUTOGENERATE_NAME(Conform)
AUTOGENERATE_NAME(Duplicate)
AUTOGENERATE_NAME(ExchangeTemplate)
AUTOGENERATE_NAME(Clean)
AUTOGENERATE_NAME(LockParticles)
AUTOGENERATE_NAME(UnLockParticles)
AUTOGENERATE_NAME(ManualTick)
AUTOGENERATE_NAME(AddLinePS)
AUTOGENERATE_NAME(ActorBreach)
AUTOGENERATE_NAME(SpawnRef)
AUTOGENERATE_NAME(NotifyPenetratingActor)
AUTOGENERATE_NAME(AddImpactEffect)
AUTOGENERATE_NAME(CollisionNotification)
AUTOGENERATE_NAME(AttachTemplate)
AUTOGENERATE_NAME(AddDestroyTemplate)
AUTOGENERATE_NAME(RegisterExternallyAffectedTemplates)
AUTOGENERATE_NAME(UnRegisterExternallyAffectedTemplates)
AUTOGENERATE_NAME(ValidateComponents)
AUTOGENERATE_NAME(AddForceTemplate)
AUTOGENERATE_NAME(AddExternalTemplate)
AUTOGENERATE_NAME(RemoveExternalTemplate)

#ifndef NAMES_ONLY


class PARTICLESYSTEMS_API ANewWind : public AActor
{
public:
    FLOAT MaxImpulseTime;
    FLOAT MinImpulseTime;
    FLOAT MaxWindspeed;
    FLOAT MinWindspeed;
    FVector Windspeed;
    BITFIELD bInitiallyOn:1 GCC_PACK(4);
    BITFIELD bOn:1;
    FLOAT TimerDuration GCC_PACK(4);
    FLOAT TriggerTime;
    FStringNoInit B_CollectGenerators;
    FStringNoInit B_TriggerWind;
    BITFIELD bCollected:1 GCC_PACK(4);
    DECLARE_CLASS(ANewWind,AActor,0,ParticleSystems)
    NO_DEFAULT_CONSTRUCTOR(ANewWind)
};


class PARTICLESYSTEMS_API AParticleColliderSphere : public AActor
{
public:
    FLOAT Elasticity;
    BITFIELD bCollectParticleGenerators:1 GCC_PACK(4);
    TArrayNoInit<class AParticleGenerator*> AffectedSystems GCC_PACK(4);
    DECLARE_CLASS(AParticleColliderSphere,AActor,0,ParticleSystems)
    #include "AParticleColliderSphere.h"
};


class PARTICLESYSTEMS_API AParticleColliderDisc : public AActor
{
public:
    FLOAT Elasticity;
    BITFIELD bCollectParticleGenerators:1 GCC_PACK(4);
    TArrayNoInit<class AParticleGenerator*> AffectedSystems GCC_PACK(4);
    DECLARE_CLASS(AParticleColliderDisc,AActor,0,ParticleSystems)
    #include "AParticleColliderDisc.h"
};

enum Ramp
{
    RAMP_None               =0,
    RAMP_Up                 =1,
    RAMP_Down               =2,
    RAMP_MAX                =3,
};
enum Select
{
    SELECT_Linear           =0,
    SELECT_Random           =1,
    SELECT_MAX              =2,
};
#define UCONST_PARTICLEVERSION_NumParticlesFix 1
#define UCONST_PARTICLEVERSION_AffectingForces 2
#define UCONST_PARTICLEVERSION_AutoLit 3
#define UCONST_PARTICLEVERSION_Current 3

struct AParticleGenerator_eventManualTick_Parms
{
    FLOAT DeltaSeconds;
};
struct AParticleGenerator_eventUnRegisterExternallyAffectedTemplates_Parms
{
};
struct AParticleGenerator_eventRegisterExternallyAffectedTemplates_Parms
{
};
struct AParticleGenerator_eventValidateComponents_Parms
{
};
struct AParticleGenerator_eventUnLockParticles_Parms
{
};
struct AParticleGenerator_eventLockParticles_Parms
{
};
struct AParticleGenerator_eventClean_Parms
{
};
struct AParticleGenerator_eventExchangeTemplate_Parms
{
    class UParticleTemplate* Old;
    class UParticleTemplate* New;
};
struct AParticleGenerator_eventDuplicate_Parms
{
    class AParticleGenerator* D;
    class ULevel* L;
};
struct AParticleGenerator_eventConform_Parms
{
    class AParticleGenerator* Image;
    BITFIELD bDeleteExisting;
};
struct AParticleGenerator_eventGetParticleTemplates_Parms
{
    class UObject* t;
};
struct AParticleGenerator_eventRemoveTemplateType_Parms
{
    FName ClassName;
    BITFIELD bAndSubclasses;
};
struct AParticleGenerator_eventRemoveTemplate_Parms
{
    class UParticleTemplate* t;
};
struct AParticleGenerator_eventAddTemplate_Parms
{
    class UParticleTemplate* t;
};
struct AParticleGenerator_eventRemoveForceType_Parms
{
    FName ClassName;
    BITFIELD bAndSubclasses;
};
struct AParticleGenerator_eventRemoveForce_Parms
{
    class UForce* RemovedForce;
};
struct AParticleGenerator_eventAddForce_Parms
{
    class UForce* AddedForce;
};
struct AParticleGenerator_eventTurnOff_Parms
{
};
struct AParticleGenerator_eventTurnOn_Parms
{
};
class PARTICLESYSTEMS_API AParticleGenerator : public AActor
{
public:
    TOrderedArrayNoInit<class UParticleTemplate*> ParticleTemplates;
    TOrderedArrayNoInit<class UForce*> Forces;
    TArrayNoInit<class UClass*> DefaultForces;
    TArrayNoInit<FName> IgnoredForces;
    FLOAT PrimeTime;
    FLOAT MaxTickSize;
    FLOAT IdleTime;
    FLOAT ParticleLifeSpan;
    INT ParticleVersion;
    BITFIELD bInterpolate:1 GCC_PACK(4);
    BITFIELD bCollisionBound:1;
    BITFIELD bShowBoundingBox:1;
    BITFIELD bLockParticles:1;
    BITFIELD bAttachment:1;
    BITFIELD bAttachDelayTick:1;
    BITFIELD bForceDelayTick:1;
    FMatrix LockedLocalToWorld GCC_PACK(4);
    FLOAT LastDeltaSeconds;
    FLOAT LastTimeDrawn;
    FVector LastLocation;
    FLOAT LastPitch;
    FLOAT LastYaw;
    FLOAT LastRoll;
    FLOAT LastBoundSizeSquared;
    BYTE SelectionMethod;
    BITFIELD bLinearFrequenciesChanged:1 GCC_PACK(4);
    FLOAT LargestWeight GCC_PACK(4);
    INT TemplateIndex;
    INT TemplateIteration;
    BITFIELD bOn:1 GCC_PACK(4);
    BITFIELD bInitiallyOn:1;
    FLOAT TimerDuration GCC_PACK(4);
    FLOAT InternalTimer;
    INT MaxParticles;
    INT ParticleCount;
    FStringNoInit Trig;
    FStringNoInit UnTrig;
    FLOAT RampUpTime;
    FLOAT RampDownTime;
    FLOAT RampTimer;
    FLOAT VolumeScale;
    BYTE RampDir;
    class USound* SoundOn GCC_PACK(4);
    class USound* SoundOff;
    class USound* SoundLoop;
    DECLARE_FUNCTION(execParticleSetVelocity);
    DECLARE_FUNCTION(execParticleGetVelocity);
    DECLARE_FUNCTION(execParticleSetLocation);
    DECLARE_FUNCTION(execParticleGetLocation);
    DECLARE_FUNCTION(execManualTick);
    DECLARE_FUNCTION(execGetMaxLifeSpan);
    DECLARE_FUNCTION(execUnRegisterExternallyAffectedTemplates);
    DECLARE_FUNCTION(execRegisterExternallyAffectedTemplates);
    DECLARE_FUNCTION(execValidateComponents);
    DECLARE_FUNCTION(execUnLockParticles);
    DECLARE_FUNCTION(execLockParticles);
    DECLARE_FUNCTION(execClean);
    DECLARE_FUNCTION(execExchangeTemplate);
    DECLARE_FUNCTION(execDuplicate);
    DECLARE_FUNCTION(execConform);
    DECLARE_FUNCTION(execGetParticleTemplates);
    DECLARE_FUNCTION(execRemoveTemplateType);
    DECLARE_FUNCTION(execRemoveTemplate);
    DECLARE_FUNCTION(execAddTemplate);
    DECLARE_FUNCTION(execRemoveForceType);
    DECLARE_FUNCTION(execRemoveForce);
    DECLARE_FUNCTION(execAddForce);
    void eventManualTick(FLOAT DeltaSeconds)
    {
        AParticleGenerator_eventManualTick_Parms Parms;
        Parms.DeltaSeconds=DeltaSeconds;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_ManualTick),&Parms);
    }
    void eventUnRegisterExternallyAffectedTemplates()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_UnRegisterExternallyAffectedTemplates),NULL);
    }
    void eventRegisterExternallyAffectedTemplates()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RegisterExternallyAffectedTemplates),NULL);
    }
    void eventValidateComponents()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_ValidateComponents),NULL);
    }
    void eventUnLockParticles()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_UnLockParticles),NULL);
    }
    void eventLockParticles()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_LockParticles),NULL);
    }
    void eventClean()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_Clean),NULL);
    }
    void eventExchangeTemplate(class UParticleTemplate* Old, class UParticleTemplate* New)
    {
        AParticleGenerator_eventExchangeTemplate_Parms Parms;
        Parms.Old=Old;
        Parms.New=New;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_ExchangeTemplate),&Parms);
    }
    void eventDuplicate(class AParticleGenerator*& D, class ULevel* L)
    {
        AParticleGenerator_eventDuplicate_Parms Parms;
        Parms.D=D;
        Parms.L=L;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_Duplicate),&Parms);
        D=Parms.D;
    }
    void eventConform(class AParticleGenerator* Image, BITFIELD bDeleteExisting)
    {
        AParticleGenerator_eventConform_Parms Parms;
        Parms.Image=Image;
        Parms.bDeleteExisting=bDeleteExisting;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_Conform),&Parms);
    }
    void eventGetParticleTemplates(class UObject*& t)
    {
        AParticleGenerator_eventGetParticleTemplates_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_GetParticleTemplates),&Parms);
        t=Parms.t;
    }
    void eventRemoveTemplateType(FName ClassName, BITFIELD bAndSubclasses)
    {
        AParticleGenerator_eventRemoveTemplateType_Parms Parms;
        Parms.ClassName=ClassName;
        Parms.bAndSubclasses=bAndSubclasses;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveTemplateType),&Parms);
    }
    void eventRemoveTemplate(class UParticleTemplate* t)
    {
        AParticleGenerator_eventRemoveTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveTemplate),&Parms);
    }
    void eventAddTemplate(class UParticleTemplate* t)
    {
        AParticleGenerator_eventAddTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddTemplate),&Parms);
    }
    void eventRemoveForceType(FName ClassName, BITFIELD bAndSubclasses)
    {
        AParticleGenerator_eventRemoveForceType_Parms Parms;
        Parms.ClassName=ClassName;
        Parms.bAndSubclasses=bAndSubclasses;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveForceType),&Parms);
    }
    void eventRemoveForce(class UForce* RemovedForce)
    {
        AParticleGenerator_eventRemoveForce_Parms Parms;
        Parms.RemovedForce=RemovedForce;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveForce),&Parms);
    }
    void eventAddForce(class UForce* AddedForce)
    {
        AParticleGenerator_eventAddForce_Parms Parms;
        Parms.AddedForce=AddedForce;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddForce),&Parms);
    }
    void eventTurnOff()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_TurnOff),NULL);
    }
    void eventTurnOn()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_TurnOn),NULL);
    }
    DECLARE_CLASS(AParticleGenerator,AActor,0,ParticleSystems)
    #include "AParticleGenerator.h"
};


class PARTICLESYSTEMS_API AParticleBlower : public AParticleGenerator
{
public:
    FLOAT Spread;
    FLOAT MaxSpeed;
    FLOAT DestroyRadius;
    FLOAT RadiusMax;
    FLOAT RadiusMin;
    FLOAT AccelMax;
    FLOAT AccelMin;
    class UBlowerForce* Blower;
    DECLARE_CLASS(AParticleBlower,AParticleGenerator,0,ParticleSystems)
    #include "AParticleBlower.h"
};


class PARTICLESYSTEMS_API AParticleAffector : public AParticleGenerator
{
public:
    DECLARE_CLASS(AParticleAffector,AParticleGenerator,0,ParticleSystems)
    #include "AParticleAffector.h"
};


class PARTICLESYSTEMS_API ATarpBuilder : public AParticleGenerator
{
public:
    FStringNoInit Reset;
    FLOAT Width;
    FLOAT Height;
    INT Columns;
    INT Rows;
    FLOAT Rigidity;
    BITFIELD bAdjustVerts:1 GCC_PACK(4);
    BITFIELD bWireframe:1;
    BITFIELD bShiny:1;
    FColor EnvBrightness GCC_PACK(4);
    TArrayNoInit<class UForce*> ForcesToAdd;
    DECLARE_FUNCTION(execAttachTo);
    DECLARE_FUNCTION(execBuild);
    DECLARE_CLASS(ATarpBuilder,AParticleGenerator,0,ParticleSystems)
    #include "ATarpBuilder.h"
};

struct PARTICLESYSTEMS_API FTConnectionInfo
{
    FVector Start;
    FVector End;
    FLOAT Length;
    class AActor* StartActor;
    class AActor* EndActor;
};


class PARTICLESYSTEMS_API APulseLineGenerator : public AParticleGenerator
{
public:
    class AActor* MeshOwner;
    FStringNoInit StartBone;
    FStringNoInit EndBone;
    TArrayNoInit<FTConnectionInfo> Connections;
    FLOAT DamageTime;
    FLOAT DamageTimer;
    INT DamageAmount;
    FVector DamageMomentum;
    class UClass* DamageType;
    FStringNoInit DamageEffect;
    FName DamageEvent;
    FLOAT DamageSleep;
    class UMaterial* BeamTexture;
    FRange BeamSegLength;
    FColor BeamColor;
    FRange BeamWidth;
    FLOAT BeamTextureWidth;
    FRange NumBeams;
    BYTE BeamStyle;
    BITFIELD bFadeAlphaOnly:1 GCC_PACK(4);
    BITFIELD bJointFadeAlphaOnly:1;
    class UMaterial* SpriteJointTexture GCC_PACK(4);
    FRange SpriteJointSize;
    FColor SpriteJointColor;
    BYTE SpriteJointStyle;
    class UClass* TemplateClass GCC_PACK(4);
    DECLARE_FUNCTION(execUpdateRenderBoundingBox);
    DECLARE_CLASS(APulseLineGenerator,AParticleGenerator,0,ParticleSystems)
    #include "APulseLineGenerator.h"
};


class PARTICLESYSTEMS_API ABendiBeamGenerator : public APulseLineGenerator
{
public:
    FRange MetaBeamSegLength;
    FRange MetaBeamWidth;
    FRange MetaBeamRefreshTime;
    DECLARE_CLASS(ABendiBeamGenerator,APulseLineGenerator,0,ParticleSystems)
    NO_DEFAULT_CONSTRUCTOR(ABendiBeamGenerator)
};


class PARTICLESYSTEMS_API AParticleSkeleton : public AParticleGenerator
{
public:
    class AActor* MeshOwner;
    INT NumParticles;
    FRange Rigidity;
    BITFIELD bInitialize:1 GCC_PACK(4);
    BITFIELD bRandomBoneSelection:1;
    FRange BoneDist GCC_PACK(4);
    FRange BoneSelectionTime;
    class UParticleTemplate* AnchorTemplate;
    DECLARE_CLASS(AParticleSkeleton,AParticleGenerator,0,ParticleSystems)
    #include "AParticleSkeleton.h"
};


class PARTICLESYSTEMS_API AParticleSalamander : public AParticleGenerator
{
public:
    FLOAT Spread;
    FRange EmisionOffset;
    FLOAT Volume;
    FLOAT ParticleTimer;
    FLOAT VolumeScalePct;
    FLOAT MinVolume;
    BITFIELD bLOSClip:1 GCC_PACK(4);
    DECLARE_CLASS(AParticleSalamander,AParticleGenerator,0,ParticleSystems)
    #include "AParticleSalamander.h"
};

enum TriSelect
{
    TS_Random               =0,
    TS_Linear               =1,
    TS_Indexed              =2,
    TS_RandIndex            =3,
    TS_MAX                  =4,
};

class PARTICLESYSTEMS_API AParticleRadiator : public AParticleGenerator
{
public:
    FLOAT Volume;
    FLOAT ParticleTimer;
    FLOAT VolumeScalePct;
    FLOAT MinVolume;
    BITFIELD bLOSClip:1 GCC_PACK(4);
    BITFIELD bStopIfHidden:1;
    class AActor* MeshOwner GCC_PACK(4);
    INT LODLevel;
    BYTE TriSelectMethod;
    TArrayNoInit<INT> TriIndices GCC_PACK(4);
    INT iTri;
    INT iIndex;
    BITFIELD bOrgiSpawn:1 GCC_PACK(4);
    FStringNoInit AttachName GCC_PACK(4);
    DECLARE_CLASS(AParticleRadiator,AParticleGenerator,0,ParticleSystems)
    #include "AParticleRadiator.h"
};


struct ALineManager_eventAddLinePS_Parms
{
    FVector Start;
    FVector End;
    FColor Color;
    BITFIELD bDirected;
    FLOAT ArrowOffset;
    FLOAT ArrowWidth;
    FLOAT ArrowHeight;
    FColor ArrowColor;
};
class PARTICLESYSTEMS_API ALineManager : public AParticleGenerator
{
public:
    DECLARE_FUNCTION(execAddLinePS);
    void eventAddLinePS(FVector Start, FVector End, FColor Color, BITFIELD bDirected, FLOAT ArrowOffset, FLOAT ArrowWidth, FLOAT ArrowHeight, FColor ArrowColor)
    {
        ALineManager_eventAddLinePS_Parms Parms;
        Parms.Start=Start;
        Parms.End=End;
        Parms.Color=Color;
        Parms.bDirected=bDirected;
        Parms.ArrowOffset=ArrowOffset;
        Parms.ArrowWidth=ArrowWidth;
        Parms.ArrowHeight=ArrowHeight;
        Parms.ArrowColor=ArrowColor;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddLinePS),&Parms);
    }
    DECLARE_CLASS(ALineManager,AParticleGenerator,0,ParticleSystems)
    #include "ALineManager.h"
};


class PARTICLESYSTEMS_API ABarbbieHareDesigner : public AParticleGenerator
{
public:
    FLOAT Spread;
    FLOAT Radius;
    INT NumStrands;
    FRange Length;
    INT NumSegments;
    FRange BendStrength;
    FRange Stretchiness;
    BITFIELD bRecalc:1 GCC_PACK(4);
    DECLARE_CLASS(ABarbbieHareDesigner,AParticleGenerator,0,ParticleSystems)
    #include "ABarbbieHareDesigner.h"
};


struct AParticleRef_eventSpawnRef_Parms
{
};
class PARTICLESYSTEMS_API AParticleRef : public AActor
{
public:
    FStringNoInit Reference;
    class UClass* Type;
    BITFIELD bPreLoad:1 GCC_PACK(4);
    BITFIELD bReset:1;
    class AParticleGenerator* Ref GCC_PACK(4);
    void eventSpawnRef()
    {
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_SpawnRef),NULL);
    }
    DECLARE_CLASS(AParticleRef,AActor,0,ParticleSystems)
    #include "AParticleRef.h"
};


struct AElectricGenerator_eventActorBreach_Parms
{
    class AActor* A;
    FVector HitLocation;
    INT Index;
    BITFIELD ReturnValue;
};
class PARTICLESYSTEMS_API AElectricGenerator : public AActor
{
public:
    class AActor* Source;
    BITFIELD bStartAtOrigin:1 GCC_PACK(4);
    BITFIELD bResetArcOnReuse:1;
    BITFIELD bLatchGeometry:1;
    BITFIELD bLatchAtOrigin:1;
    FLOAT AffectedRadius GCC_PACK(4);
    FLOAT MinArcLength;
    FRange LatchRate;
    FRange ArcLifeSpan;
    FName AffectedTypes[3];
    FRange DamageRate;
    FRange DamageStart;
    FStringNoInit SparkType;
    class UClass* BeamType;
    FLOAT SpreadDegrees;
    FElectricArc ElectricArcs[32];
    FLOAT NextArcTime;
    INT TickDelay;
    BITFIELD bOn:1 GCC_PACK(4);
    BITFIELD bInitiallyOn:1;
    FLOAT TimerDuration GCC_PACK(4);
    FLOAT InternalTimer;
    class UMaterial* BeamTexture;
    FRange BeamSegLength;
    FColor BeamColor;
    FRange BeamWidth;
    FRange BeamTextureWidth;
    FRange NumBeams;
    class UMaterial* SpriteJointTexture;
    FRange SpriteJointSize;
    FColor SpriteJointColor;
    FRange MetaBeamSegLength;
    FRange MetaBeamWidth;
    FRange MetaBeamRefreshTime;
    FLOAT DamageTime;
    INT DamageAmount;
    FVector DamageMomentum;
    class UClass* DamageType;
    FStringNoInit DamageEffect;
    DECLARE_FUNCTION(execGetTriLocation);
    DECLARE_FUNCTION(execGetFacingTriIndex);
    BITFIELD eventActorBreach(class AActor* A, FVector HitLocation, INT Index)
    {
        AElectricGenerator_eventActorBreach_Parms Parms;
        Parms.ReturnValue=0;
        Parms.A=A;
        Parms.HitLocation=HitLocation;
        Parms.Index=Index;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_ActorBreach),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AElectricGenerator,AActor,0,ParticleSystems)
    #include "AElectricGenerator.h"
};

enum EDrawStyle
{
    STYLE_Translucent       =0,
    STYLE_Modulated         =1,
    STYLE_Normal            =2,
    STYLE_Alpha             =3,
    STYLE_AlphaModulate     =4,
    STYLE_Brighten          =5,
    STYLE_Darken            =6,
    STYLE_Masked            =7,
    STYLE_TrueTranslucent   =8,
    STYLE_MAX               =9,
};

class PARTICLESYSTEMS_API UParticleTemplate : public UObject
{
public:
    FRange InitialSpeed;
    FRange InitialLifeSpan;
    FRange StasisTime;
    class AActor* LifeSpanLimitor;
    FLOAT SelectionWeight;
    FLOAT Frequency;
    FLOAT CumulativeFreq;
    TArrayNoInit<class AActor*> Lights;
    TArrayNoInit<class AActor*> RaytracedLights;
    BITFIELD bDynamicLit:1 GCC_PACK(4);
    INT MaxDynamicLights GCC_PACK(4);
    BITFIELD bExternallyAffected:1 GCC_PACK(4);
    BITFIELD bReverseDrawOrder:1;
    BITFIELD bRandomDrawOrder:1;
    BITFIELD ChangeClass:1;
    FLOAT DrawOrder GCC_PACK(4);
    FStringNoInit ParticleType;
    TArrayNoInit<FParticleHandle> ParticleList;
    FBox Extents;
    TArrayNoInit<class UForce*> AffectingForces;
    INT HardwareLightsUsed;
    DECLARE_CLASS(UParticleTemplate,UObject,0,ParticleSystems)
    #include "UParticleTemplate.h"
};


class PARTICLESYSTEMS_API USpriteParticleTemplate : public UParticleTemplate
{
public:
    class UMaterial* Sprite;
    class UTextureArray* SpriteArray;
    TArrayNoInit<INT> SpriteIndices;
    INT SpriteIndex;
    BYTE Style;
    FRange InitialSize GCC_PACK(4);
    FRange InitialAlpha;
    BITFIELD bFadeAlphaOnly:1 GCC_PACK(4);
    BITFIELD bAnimateSprite:1;
    BITFIELD bRandomSprite:1;
    BITFIELD bAnimateCorona:1;
    BITFIELD bRandomCorona:1;
    BITFIELD CoronaOcclude:1;
    BITFIELD bCoronaFadeAlphaOnly:1;
    class UMaterial* Corona GCC_PACK(4);
    BYTE CoronaStyle;
    FLOAT CoronaScale GCC_PACK(4);
    FLOAT CoronaScaleGlow;
    class UTextureArray* CoronaArray;
    TArrayNoInit<INT> CoronaIndices;
    INT CoronaIndex;
    FLOAT CoronaTraceRate;
    DECLARE_CLASS(USpriteParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "USpriteParticleTemplate.h"
};


class PARTICLESYSTEMS_API UWetWindshildParticleTemplate : public USpriteParticleTemplate
{
public:
    DECLARE_CLASS(UWetWindshildParticleTemplate,USpriteParticleTemplate,0,ParticleSystems)
    #include "UWetWindshildParticleTemplate.h"
};


class PARTICLESYSTEMS_API UViewVelocityScaledParticleTemplate : public USpriteParticleTemplate
{
public:
    FRange ScaleFactor;
    FRange StretchOffset;
    FLOAT MaxStretch;
    DECLARE_CLASS(UViewVelocityScaledParticleTemplate,USpriteParticleTemplate,0,ParticleSystems)
    #include "UViewVelocityScaledParticleTemplate.h"
};


class PARTICLESYSTEMS_API USprite3DParticleTemplate : public USpriteParticleTemplate
{
public:
    BITFIELD bNoClip:1 GCC_PACK(4);
    DECLARE_CLASS(USprite3DParticleTemplate,USpriteParticleTemplate,0,ParticleSystems)
    #include "USprite3DParticleTemplate.h"
};


class PARTICLESYSTEMS_API URotatingParticleTemplate : public USprite3DParticleTemplate
{
public:
    FRange InitialAngle;
    DECLARE_CLASS(URotatingParticleTemplate,USprite3DParticleTemplate,0,ParticleSystems)
    #include "URotatingParticleTemplate.h"
};


class PARTICLESYSTEMS_API UParticleDecalTemplate : public USpriteParticleTemplate
{
public:
    DECLARE_CLASS(UParticleDecalTemplate,USpriteParticleTemplate,0,ParticleSystems)
    #include "UParticleDecalTemplate.h"
};


class PARTICLESYSTEMS_API UTriParticleTemplate : public UParticleTemplate
{
public:
    class UMaterial* Texture;
    BYTE Style;
    FRange InitialRadius GCC_PACK(4);
    FRange InitialAlpha;
    FRange InitialEnergy;
    BITFIELD bEqualateral:1 GCC_PACK(4);
    class UParticleTemplate* AdditionalParticles GCC_PACK(4);
    DECLARE_CLASS(UTriParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UTriParticleTemplate.h"
};


class PARTICLESYSTEMS_API UTriangleParticleTemplate : public UParticleTemplate
{
public:
    class UMaterial* Texture;
    BYTE Style;
    FRange InitialRadius GCC_PACK(4);
    FRange InitialAlpha;
    FRange InitialEnergy;
    BITFIELD bEqualateral:1 GCC_PACK(4);
    class UParticleTemplate* AdditionalParticles GCC_PACK(4);
    DECLARE_CLASS(UTriangleParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UTriangleParticleTemplate.h"
};


class PARTICLESYSTEMS_API UTexturedStreakParticleTemplate : public UParticleTemplate
{
public:
    class UMaterial* Texture;
    BYTE Style;
    FRange Length GCC_PACK(4);
    FRange WidthStart;
    FRange WidthEnd;
    FRange InitialAlpha;
    BITFIELD bFadeAlphaOnly:1 GCC_PACK(4);
    TArrayNoInit<FColor> Colors GCC_PACK(4);
    DECLARE_CLASS(UTexturedStreakParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UTexturedStreakParticleTemplate.h"
};


class PARTICLESYSTEMS_API UStreakParticleTemplate : public UParticleTemplate
{
public:
    FColor Color;
    FRange InitialAlpha;
    BITFIELD bFadeAlphaOnly:1 GCC_PACK(4);
    FRange Length GCC_PACK(4);
    DECLARE_CLASS(UStreakParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UStreakParticleTemplate.h"
};


class PARTICLESYSTEMS_API UStrandParticleTemplate : public UParticleTemplate
{
public:
    FColor Color;
    FLOAT ColorVariation;
    FLOAT Shinyness;
    DECLARE_CLASS(UStrandParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UStrandParticleTemplate.h"
};


class PARTICLESYSTEMS_API URecursiveParticleTemplate : public UParticleTemplate
{
public:
    class UClass* ParticleGeneratorClass;
    class AParticleGenerator* ParticleGeneratorTemplate;
    FRotator AdditionalRotation;
    class AActor* Target;
    FLOAT PrimeTime;
    DECLARE_CLASS(URecursiveParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "URecursiveParticleTemplate.h"
};


class PARTICLESYSTEMS_API UPointParticleTemplate : public UParticleTemplate
{
public:
    BYTE Style;
    FColor Color GCC_PACK(4);
    FRange InitialAlpha;
    BITFIELD bFadeAlphaOnly:1 GCC_PACK(4);
    class UMaterial* Texture GCC_PACK(4);
    FLOAT Size;
    BITFIELD Scale:1 GCC_PACK(4);
    FLOAT ScaleA GCC_PACK(4);
    FLOAT ScaleB;
    FLOAT ScaleC;
    DECLARE_CLASS(UPointParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UPointParticleTemplate.h"
};


class PARTICLESYSTEMS_API ULineManagerTemplate : public UParticleTemplate
{
public:
    DECLARE_CLASS(ULineManagerTemplate,UParticleTemplate,0,ParticleSystems)
    #include "ULineManagerTemplate.h"
};


class PARTICLESYSTEMS_API UActorParticleTemplate : public UParticleTemplate
{
public:
    class AActor* Template;
    DECLARE_CLASS(UActorParticleTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UActorParticleTemplate.h"
};


class PARTICLESYSTEMS_API UTarpBuilderTemplate : public UParticleTemplate
{
public:
    DECLARE_CLASS(UTarpBuilderTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UTarpBuilderTemplate.h"
};


class PARTICLESYSTEMS_API UPulseLineTemplate : public UParticleTemplate
{
public:
    DECLARE_CLASS(UPulseLineTemplate,UParticleTemplate,0,ParticleSystems)
    #include "UPulseLineTemplate.h"
};


class PARTICLESYSTEMS_API UBendiBeamTemplate : public UPulseLineTemplate
{
public:
    DECLARE_CLASS(UBendiBeamTemplate,UPulseLineTemplate,0,ParticleSystems)
    #include "UBendiBeamTemplate.h"
};


struct UForce_eventRemoveExternalTemplate_Parms
{
    class UParticleTemplate* t;
};
struct UForce_eventAddExternalTemplate_Parms
{
    class UParticleTemplate* t;
};
struct UForce_eventRemoveTemplate_Parms
{
    class UParticleTemplate* t;
};
struct UForce_eventAddTemplate_Parms
{
    class UParticleTemplate* t;
};
class PARTICLESYSTEMS_API UForce : public UObject
{
public:
    FLOAT Priority;
    FName GroupName;
    BITFIELD bIterateAll:1 GCC_PACK(4);
    TArrayNoInit<class UParticleTemplate*> AffectedTemplates GCC_PACK(4);
    DECLARE_FUNCTION(execRemoveExternalTemplate);
    DECLARE_FUNCTION(execAddExternalTemplate);
    DECLARE_FUNCTION(execRemoveTemplate);
    DECLARE_FUNCTION(execAddTemplate);
    void eventRemoveExternalTemplate(class UParticleTemplate* t)
    {
        UForce_eventRemoveExternalTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveExternalTemplate),&Parms);
    }
    void eventAddExternalTemplate(class UParticleTemplate* t)
    {
        UForce_eventAddExternalTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddExternalTemplate),&Parms);
    }
    void eventRemoveTemplate(class UParticleTemplate* t)
    {
        UForce_eventRemoveTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_RemoveTemplate),&Parms);
    }
    void eventAddTemplate(class UParticleTemplate* t)
    {
        UForce_eventAddTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddTemplate),&Parms);
    }
    DECLARE_CLASS(UForce,UObject,0,ParticleSystems)
    #include "UForce.h"
};


class PARTICLESYSTEMS_API UWindForce : public UForce
{
public:
    class ANewWind* Master;
    DECLARE_CLASS(UWindForce,UForce,0,ParticleSystems)
    #include "UWindForce.h"
};


class PARTICLESYSTEMS_API UVoidDestroyer : public UForce
{
public:
    DECLARE_CLASS(UVoidDestroyer,UForce,0,ParticleSystems)
    #include "UVoidDestroyer.h"
};


class PARTICLESYSTEMS_API UVariablePerParticleGravity : public UForce
{
public:
    FRange StartGravity;
    FRange EndGravity;
    FRange ChangeTime;
    DECLARE_CLASS(UVariablePerParticleGravity,UForce,0,ParticleSystems)
    #include "UVariablePerParticleGravity.h"
};


class PARTICLESYSTEMS_API UTriForce : public UForce
{
public:
    DECLARE_CLASS(UTriForce,UForce,0,ParticleSystems)
    #include "UTriForce.h"
};


class PARTICLESYSTEMS_API UTriangleForce : public UForce
{
public:
    DECLARE_CLASS(UTriangleForce,UForce,0,ParticleSystems)
    #include "UTriangleForce.h"
};


class PARTICLESYSTEMS_API UTarpCollider : public UForce
{
public:
    DECLARE_CLASS(UTarpCollider,UForce,0,ParticleSystems)
    #include "UTarpCollider.h"
};


class PARTICLESYSTEMS_API ULocatorForce : public UForce
{
public:
    DECLARE_CLASS(ULocatorForce,UForce,0,ParticleSystems)
    #include "ULocatorForce.h"
};


class PARTICLESYSTEMS_API USpringLocator : public ULocatorForce
{
public:
    DECLARE_CLASS(USpringLocator,ULocatorForce,0,ParticleSystems)
    #include "USpringLocator.h"
};


class PARTICLESYSTEMS_API USpringForce : public UForce
{
public:
    FLOAT Stiffness;
    FLOAT SpringLength;
    FParticleHandle ParticleA;
    FParticleHandle ParticleB;
    INT StiffnessPtr;
    DECLARE_FUNCTION(execSetEndpoints);
    DECLARE_CLASS(USpringForce,UForce,0,ParticleSystems)
    #include "USpringForce.h"
};


class PARTICLESYSTEMS_API USlipForce : public UForce
{
public:
    FRange Distance;
    FParticleHandle ParticleA;
    FParticleHandle ParticleB;
    DECLARE_FUNCTION(execSetEndpoints);
    DECLARE_CLASS(USlipForce,UForce,0,ParticleSystems)
    #include "USlipForce.h"
};


class PARTICLESYSTEMS_API URotationGrouped : public UForce
{
public:
    class AActor* RelativeActor;
    FRotator LastRotation;
    DECLARE_CLASS(URotationGrouped,UForce,0,ParticleSystems)
    #include "URotationGrouped.h"
};


class PARTICLESYSTEMS_API URotationForce : public UForce
{
public:
    FRange RotationRate;
    BYTE Phase;
    DECLARE_CLASS(URotationForce,UForce,0,ParticleSystems)
    #include "URotationForce.h"
};


class PARTICLESYSTEMS_API URigidBody : public UForce
{
public:
    FLOAT Pitch;
    FLOAT Yaw;
    FVector Center;
    DECLARE_CLASS(URigidBody,UForce,0,ParticleSystems)
    #include "URigidBody.h"
};


class PARTICLESYSTEMS_API UResizeForce : public UForce
{
public:
    FRange SizeRate;
    BYTE Phase;
    DECLARE_CLASS(UResizeForce,UForce,0,ParticleSystems)
    #include "UResizeForce.h"
};


class PARTICLESYSTEMS_API URepulsionForce : public UForce
{
public:
    FLOAT Strength;
    DECLARE_CLASS(URepulsionForce,UForce,0,ParticleSystems)
    #include "URepulsionForce.h"
};


class PARTICLESYSTEMS_API UPerParticleGravity : public UForce
{
public:
    FRange Gravity;
    BITFIELD bUseZoneGravity:1 GCC_PACK(4);
    DECLARE_CLASS(UPerParticleGravity,UForce,0,ParticleSystems)
    #include "UPerParticleGravity.h"
};


class PARTICLESYSTEMS_API UPerParticleFriction : public UForce
{
public:
    FRange Friction;
    DECLARE_CLASS(UPerParticleFriction,UForce,0,ParticleSystems)
    #include "UPerParticleFriction.h"
};


struct UParticleSalamanderForce_eventAddForceTemplate_Parms
{
    class UParticleTemplate* t;
};
class PARTICLESYSTEMS_API UParticleSalamanderForce : public UForce
{
public:
    FLOAT Spread;
    FRange EmisionOffset;
    FRange Volume;
    TArrayNoInit<class UParticleTemplate*> ForceTemplates;
    BITFIELD bInheritVelocity:1 GCC_PACK(4);
    DECLARE_FUNCTION(execAddForceTemplate);
    void eventAddForceTemplate(class UParticleTemplate* t)
    {
        UParticleSalamanderForce_eventAddForceTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddForceTemplate),&Parms);
    }
    DECLARE_CLASS(UParticleSalamanderForce,UForce,0,ParticleSystems)
    #include "UParticleSalamanderForce.h"
};


class PARTICLESYSTEMS_API UOscillatingPerParticleForce : public UForce
{
public:
    FRange ForceX;
    FRange ForceY;
    FRange ForceZ;
    FRange PeriodX;
    FRange PeriodY;
    FRange PeriodZ;
    BITFIELD bAccelerator:1 GCC_PACK(4);
    DECLARE_CLASS(UOscillatingPerParticleForce,UForce,0,ParticleSystems)
    #include "UOscillatingPerParticleForce.h"
};


struct UOnDestroyForce_eventAddDestroyTemplate_Parms
{
    class UParticleTemplate* t;
};
class PARTICLESYSTEMS_API UOnDestroyForce : public UForce
{
public:
    TArrayNoInit<class UParticleTemplate*> OnDestroyTemplates;
    BITFIELD bInheritVelocity:1 GCC_PACK(4);
    class USound* Sound GCC_PACK(4);
    FRange Volume;
    FRange Radius;
    FRange Pitch;
    FLOAT DamageAmount;
    FLOAT DamageRadius;
    class UClass* DamageType;
    FLOAT Momentum;
    DECLARE_FUNCTION(execAddDestroyTemplate);
    void eventAddDestroyTemplate(class UParticleTemplate* t)
    {
        UOnDestroyForce_eventAddDestroyTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddDestroyTemplate),&Parms);
    }
    DECLARE_CLASS(UOnDestroyForce,UForce,0,ParticleSystems)
    #include "UOnDestroyForce.h"
};


class PARTICLESYSTEMS_API UNeuralNetForce : public UForce
{
public:
    BITFIELD bLearn:1 GCC_PACK(4);
    INT NumHidden GCC_PACK(4);
    FLOAT Alpha;
    FLOAT Initial;
    DECLARE_CLASS(UNeuralNetForce,UForce,0,ParticleSystems)
    #include "UNeuralNetForce.h"
};


struct UMultiTemplateForce_eventAttachTemplate_Parms
{
    class UParticleTemplate* t;
};
class PARTICLESYSTEMS_API UMultiTemplateForce : public UForce
{
public:
    TArrayNoInit<class UParticleTemplate*> AttachedTemplates;
    TArrayNoInit<FRangeVector> TemplateOffsets;
    DECLARE_FUNCTION(execAttachTemplate);
    void eventAttachTemplate(class UParticleTemplate* t)
    {
        UMultiTemplateForce_eventAttachTemplate_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AttachTemplate),&Parms);
    }
    DECLARE_CLASS(UMultiTemplateForce,UForce,0,ParticleSystems)
    #include "UMultiTemplateForce.h"
};


class PARTICLESYSTEMS_API UMoveZig : public UForce
{
public:
    FRange Zig;
    FVector DirMax;
    FVector DirMin;
    BITFIELD bRelative:1 GCC_PACK(4);
    BITFIELD bTrace:1;
    DECLARE_CLASS(UMoveZig,UForce,0,ParticleSystems)
    #include "UMoveZig.h"
};


class PARTICLESYSTEMS_API UMeshAnchor : public UForce
{
public:
    class AActor* RelativeActor;
    FParticleHandle ParticleA;
    INT VertexIndex;
    DECLARE_CLASS(UMeshAnchor,UForce,0,ParticleSystems)
    #include "UMeshAnchor.h"
};


class PARTICLESYSTEMS_API UMaxVelocityForce : public UForce
{
public:
    FLOAT MaxVelocity;
    DECLARE_CLASS(UMaxVelocityForce,UForce,0,ParticleSystems)
    #include "UMaxVelocityForce.h"
};


class PARTICLESYSTEMS_API ULocationGrouped : public UForce
{
public:
    class AActor* RelativeActor;
    FVector LastLocation;
    BITFIELD bInterpolationCorrection:1 GCC_PACK(4);
    DECLARE_CLASS(ULocationGrouped,UForce,0,ParticleSystems)
    #include "ULocationGrouped.h"
};


class PARTICLESYSTEMS_API ULimitedResizeForce : public UForce
{
public:
    FRange FromSize;
    FRange ToSize;
    DECLARE_CLASS(ULimitedResizeForce,UForce,0,ParticleSystems)
    #include "ULimitedResizeForce.h"
};


class PARTICLESYSTEMS_API UInertiaForce : public UForce
{
public:
    FLOAT Weight;
    DECLARE_CLASS(UInertiaForce,UForce,0,ParticleSystems)
    #include "UInertiaForce.h"
};


class PARTICLESYSTEMS_API UGlobalAccelerator : public UForce
{
public:
    FVector Force;
    BITFIELD bUseZoneGravity:1 GCC_PACK(4);
    DECLARE_CLASS(UGlobalAccelerator,UForce,0,ParticleSystems)
    #include "UGlobalAccelerator.h"
};

struct PARTICLESYSTEMS_API FProjSettings
{
    BYTE MaterialBlendingOp;
    BYTE FrameBufferBlendingOp;
    class UMaterial* ProjTexture GCC_PACK(4);
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectParticles:1;
    BITFIELD bProjectActor:1;
    BITFIELD bClipBSP:1;
    BITFIELD bClipStaticMesh:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bGradient:1;
    BITFIELD bProjectOnBackfaces:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    FName ProjectTag GCC_PACK(4);
    FName ExcludedActorsTag;
    FRange Size;
    FRange Alpha;
};


struct UGeometryCollider_eventCollisionNotification_Parms
{
    FParticleHandle P;
    FCheckResult Hit;
};
struct UGeometryCollider_eventAddImpactEffect_Parms
{
    class UParticleTemplate* t;
};
class PARTICLESYSTEMS_API UGeometryCollider : public UForce
{
public:
    BITFIELD bCollideActors:1 GCC_PACK(4);
    BITFIELD bDiffuse:1;
    BITFIELD bCollisionNotify:1;
    BITFIELD bDeleteOnContact:1;
    BITFIELD bStopOnContact:1;
    BITFIELD bIgnoreInstigator:1;
    FRange Elasticity GCC_PACK(4);
    INT NotificationsPerTick;
    FLOAT MaxNotificationTime;
    FLOAT NotificationTimer;
    FLOAT MinIncidence;
    TArrayNoInit<class UParticleTemplate*> ImpactEffects;
    FLOAT ImpactPercent;
    class USound* Sound;
    FRange Volume;
    FRange Radius;
    FRange Pitch;
    TArrayNoInit<FProjSettings> ProjectorSettings;
    DECLARE_FUNCTION(execAddImpactEffect);
    void eventCollisionNotification(FParticleHandle P, FCheckResult Hit)
    {
        UGeometryCollider_eventCollisionNotification_Parms Parms;
        Parms.P=P;
        Parms.Hit=Hit;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_CollisionNotification),&Parms);
    }
    void eventAddImpactEffect(class UParticleTemplate* t)
    {
        UGeometryCollider_eventAddImpactEffect_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_AddImpactEffect),&Parms);
    }
    DECLARE_CLASS(UGeometryCollider,UForce,0,ParticleSystems)
    #include "UGeometryCollider.h"
};


class PARTICLESYSTEMS_API UGeometryColliderEx : public UGeometryCollider
{
public:
    FRange NumBounces;
    DECLARE_CLASS(UGeometryColliderEx,UGeometryCollider,0,ParticleSystems)
    #include "UGeometryColliderEx.h"
};


class PARTICLESYSTEMS_API UGeoCollideAndMerge : public UGeometryCollider
{
public:
    FName Type;
    DECLARE_CLASS(UGeoCollideAndMerge,UGeometryCollider,0,ParticleSystems)
    #include "UGeoCollideAndMerge.h"
};


class PARTICLESYSTEMS_API UFrictionForce : public UForce
{
public:
    FLOAT Friction;
    FLOAT MinVelocity;
    FLOAT MinVeloSquared;
    DECLARE_CLASS(UFrictionForce,UForce,0,ParticleSystems)
    #include "UFrictionForce.h"
};


class PARTICLESYSTEMS_API UFadeOutForce : public UForce
{
public:
    FRange FadeTime;
    DECLARE_CLASS(UFadeOutForce,UForce,0,ParticleSystems)
    #include "UFadeOutForce.h"
};


class PARTICLESYSTEMS_API UFadeInForce : public UForce
{
public:
    FRange FadeTime;
    DECLARE_CLASS(UFadeInForce,UForce,0,ParticleSystems)
    #include "UFadeInForce.h"
};


class PARTICLESYSTEMS_API UFadeForce : public UForce
{
public:
    FRange AlphaRate;
    BYTE Phase;
    DECLARE_CLASS(UFadeForce,UForce,0,ParticleSystems)
    #include "UFadeForce.h"
};


class PARTICLESYSTEMS_API UDestroyOnDamage : public UForce
{
public:
    FLOAT Radius;
    TArrayNoInit<class UClass*> DamageTypes;
    FLOAT DestroyLifeSpan;
    DECLARE_FUNCTION(execNotify);
    DECLARE_CLASS(UDestroyOnDamage,UForce,0,ParticleSystems)
    #include "UDestroyOnDamage.h"
};


class PARTICLESYSTEMS_API UMinDecayForce : public UForce
{
public:
    FLOAT MinDecay;
    DECLARE_CLASS(UMinDecayForce,UForce,0,ParticleSystems)
    #include "UMinDecayForce.h"
};


class PARTICLESYSTEMS_API UDecayForce : public UForce
{
public:
    DECLARE_CLASS(UDecayForce,UForce,0,ParticleSystems)
    #include "UDecayForce.h"
};


class PARTICLESYSTEMS_API UColorForce : public UForce
{
public:
    TArrayNoInit<FColor> Colors;
    DECLARE_CLASS(UColorForce,UForce,0,ParticleSystems)
    #include "UColorForce.h"
};


class PARTICLESYSTEMS_API UCollisionSphereForce : public UForce
{
public:
    class AParticleColliderSphere* Parent;
    DECLARE_CLASS(UCollisionSphereForce,UForce,0,ParticleSystems)
    #include "UCollisionSphereForce.h"
};


class PARTICLESYSTEMS_API UCollisionDiscForce : public UForce
{
public:
    class AParticleColliderDisc* Parent;
    DECLARE_CLASS(UCollisionDiscForce,UForce,0,ParticleSystems)
    #include "UCollisionDiscForce.h"
};


class PARTICLESYSTEMS_API UBoneLocatorForce : public UForce
{
public:
    INT BoneIndex;
    FParticleHandle ParticleA;
    DECLARE_FUNCTION(execSetParticle);
    DECLARE_CLASS(UBoneLocatorForce,UForce,0,ParticleSystems)
    #include "UBoneLocatorForce.h"
};


class PARTICLESYSTEMS_API UBlowerForce : public UForce
{
public:
    DECLARE_CLASS(UBlowerForce,UForce,0,ParticleSystems)
    #include "UBlowerForce.h"
};


class PARTICLESYSTEMS_API UAttractionForce : public UForce
{
public:
    FLOAT Rigidity;
    FParticleHandle ParticleA;
    FParticleHandle ParticleB;
    DECLARE_FUNCTION(execSetEndpoints);
    DECLARE_CLASS(UAttractionForce,UForce,0,ParticleSystems)
    #include "UAttractionForce.h"
};


class PARTICLESYSTEMS_API UAnchorForce : public UForce
{
public:
    class AActor* RelativeActor;
    FParticleHandle ParticleA;
    FVector RelativeOffset;
    BITFIELD bRotateWithActor:1 GCC_PACK(4);
    DECLARE_FUNCTION(execSetParticle);
    DECLARE_CLASS(UAnchorForce,UForce,0,ParticleSystems)
    #include "UAnchorForce.h"
};


struct UActorCollisionNotifier_eventNotifyPenetratingActor_Parms
{
    class AActor* Other;
    INT NumParticles;
    FVector Origin;
};
class PARTICLESYSTEMS_API UActorCollisionNotifier : public UForce
{
public:
    FLOAT Radius;
    BITFIELD bUseTrace:1 GCC_PACK(4);
    BITFIELD bDeleteOnContact:1;
    BITFIELD bIgnoreInstigator:1;
    void eventNotifyPenetratingActor(class AActor* Other, INT NumParticles, FVector Origin)
    {
        UActorCollisionNotifier_eventNotifyPenetratingActor_Parms Parms;
        Parms.Other=Other;
        Parms.NumParticles=NumParticles;
        Parms.Origin=Origin;
        ProcessEvent(FindFunctionChecked(PARTICLESYSTEMS_NotifyPenetratingActor),&Parms);
    }
    DECLARE_CLASS(UActorCollisionNotifier,UForce,0,ParticleSystems)
    #include "UActorCollisionNotifier.h"
};

#endif

AUTOGENERATE_FUNCTION(UForce,-1,execRemoveExternalTemplate);
AUTOGENERATE_FUNCTION(UForce,-1,execAddExternalTemplate);
AUTOGENERATE_FUNCTION(UForce,-1,execRemoveTemplate);
AUTOGENERATE_FUNCTION(UForce,-1,execAddTemplate);
AUTOGENERATE_FUNCTION(USpringForce,-1,execSetEndpoints);
AUTOGENERATE_FUNCTION(USlipForce,-1,execSetEndpoints);
AUTOGENERATE_FUNCTION(UParticleSalamanderForce,-1,execAddForceTemplate);
AUTOGENERATE_FUNCTION(UOnDestroyForce,-1,execAddDestroyTemplate);
AUTOGENERATE_FUNCTION(UMultiTemplateForce,-1,execAttachTemplate);
AUTOGENERATE_FUNCTION(UGeometryCollider,-1,execAddImpactEffect);
AUTOGENERATE_FUNCTION(UDestroyOnDamage,-1,execNotify);
AUTOGENERATE_FUNCTION(UBoneLocatorForce,-1,execSetParticle);
AUTOGENERATE_FUNCTION(UAttractionForce,-1,execSetEndpoints);
AUTOGENERATE_FUNCTION(UAnchorForce,-1,execSetParticle);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execParticleSetVelocity);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execParticleGetVelocity);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execParticleSetLocation);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execParticleGetLocation);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execManualTick);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execGetMaxLifeSpan);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execUnRegisterExternallyAffectedTemplates);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execRegisterExternallyAffectedTemplates);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execValidateComponents);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execUnLockParticles);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execLockParticles);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execClean);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execExchangeTemplate);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execDuplicate);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execConform);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execGetParticleTemplates);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execRemoveTemplateType);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execRemoveTemplate);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execAddTemplate);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execRemoveForceType);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execRemoveForce);
AUTOGENERATE_FUNCTION(AParticleGenerator,-1,execAddForce);
AUTOGENERATE_FUNCTION(ATarpBuilder,-1,execAttachTo);
AUTOGENERATE_FUNCTION(ATarpBuilder,-1,execBuild);
AUTOGENERATE_FUNCTION(APulseLineGenerator,-1,execUpdateRenderBoundingBox);
AUTOGENERATE_FUNCTION(ALineManager,-1,execAddLinePS);
AUTOGENERATE_FUNCTION(AElectricGenerator,-1,execGetTriLocation);
AUTOGENERATE_FUNCTION(AElectricGenerator,-1,execGetFacingTriIndex);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef PARTICLESYSTEMS_NATIVE_DEFS
#define PARTICLESYSTEMS_NATIVE_DEFS

DECLARE_NATIVE_TYPE(ParticleSystems,UWetWindshildParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,USpriteParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UViewVelocityScaledParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UTriParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UTriangleParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UTexturedStreakParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UStreakParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UStrandParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,USprite3DParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,URotatingParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,URecursiveParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UPointParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UParticleDecalTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,ULineManagerTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UActorParticleTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,ANewWind);
DECLARE_NATIVE_TYPE(ParticleSystems,UWindForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UVoidDestroyer);
DECLARE_NATIVE_TYPE(ParticleSystems,UVariablePerParticleGravity);
DECLARE_NATIVE_TYPE(ParticleSystems,UTriForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UTriangleForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UTarpCollider);
DECLARE_NATIVE_TYPE(ParticleSystems,USpringLocator);
DECLARE_NATIVE_TYPE(ParticleSystems,ULocatorForce);
DECLARE_NATIVE_TYPE(ParticleSystems,USpringForce);
DECLARE_NATIVE_TYPE(ParticleSystems,USlipForce);
DECLARE_NATIVE_TYPE(ParticleSystems,URotationGrouped);
DECLARE_NATIVE_TYPE(ParticleSystems,URotationForce);
DECLARE_NATIVE_TYPE(ParticleSystems,URigidBody);
DECLARE_NATIVE_TYPE(ParticleSystems,UResizeForce);
DECLARE_NATIVE_TYPE(ParticleSystems,URepulsionForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UPerParticleGravity);
DECLARE_NATIVE_TYPE(ParticleSystems,UPerParticleFriction);
DECLARE_NATIVE_TYPE(ParticleSystems,UParticleSalamanderForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UOscillatingPerParticleForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UOnDestroyForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UNeuralNetForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UMultiTemplateForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UMoveZig);
DECLARE_NATIVE_TYPE(ParticleSystems,UMeshAnchor);
DECLARE_NATIVE_TYPE(ParticleSystems,UMaxVelocityForce);
DECLARE_NATIVE_TYPE(ParticleSystems,ULocationGrouped);
DECLARE_NATIVE_TYPE(ParticleSystems,ULimitedResizeForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UInertiaForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UGlobalAccelerator);
DECLARE_NATIVE_TYPE(ParticleSystems,UGeometryColliderEx);
DECLARE_NATIVE_TYPE(ParticleSystems,UGeometryCollider);
DECLARE_NATIVE_TYPE(ParticleSystems,UGeoCollideAndMerge);
DECLARE_NATIVE_TYPE(ParticleSystems,UFrictionForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UFadeOutForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UFadeInForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UFadeForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UDestroyOnDamage);
DECLARE_NATIVE_TYPE(ParticleSystems,UMinDecayForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UDecayForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UColorForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UCollisionSphereForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UCollisionDiscForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UBoneLocatorForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UBlowerForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UAttractionForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UAnchorForce);
DECLARE_NATIVE_TYPE(ParticleSystems,UActorCollisionNotifier);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleColliderSphere);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleColliderDisc);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleBlower);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleGenerator);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleAffector);
DECLARE_NATIVE_TYPE(ParticleSystems,UTarpBuilderTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UPulseLineTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,UBendiBeamTemplate);
DECLARE_NATIVE_TYPE(ParticleSystems,ATarpBuilder);
DECLARE_NATIVE_TYPE(ParticleSystems,ABendiBeamGenerator);
DECLARE_NATIVE_TYPE(ParticleSystems,APulseLineGenerator);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleSkeleton);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleSalamander);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleRef);
DECLARE_NATIVE_TYPE(ParticleSystems,AParticleRadiator);
DECLARE_NATIVE_TYPE(ParticleSystems,ALineManager);
DECLARE_NATIVE_TYPE(ParticleSystems,AElectricGenerator);
DECLARE_NATIVE_TYPE(ParticleSystems,ABarbbieHareDesigner);

#define AUTO_INITIALIZE_REGISTRANTS_PARTICLESYSTEMS \
	UWetWindshildParticleTemplate::StaticClass(); \
	USpriteParticleTemplate::StaticClass(); \
	UParticleTemplate::StaticClass(); \
	UViewVelocityScaledParticleTemplate::StaticClass(); \
	UTriParticleTemplate::StaticClass(); \
	UTriangleParticleTemplate::StaticClass(); \
	UTexturedStreakParticleTemplate::StaticClass(); \
	UStreakParticleTemplate::StaticClass(); \
	UStrandParticleTemplate::StaticClass(); \
	USprite3DParticleTemplate::StaticClass(); \
	URotatingParticleTemplate::StaticClass(); \
	URecursiveParticleTemplate::StaticClass(); \
	UPointParticleTemplate::StaticClass(); \
	UParticleDecalTemplate::StaticClass(); \
	ULineManagerTemplate::StaticClass(); \
	UActorParticleTemplate::StaticClass(); \
	UGeneratorPrimitive::StaticClass(); \
	ANewWind::StaticClass(); \
	UWindForce::StaticClass(); \
	UForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUForceNative; \
	UVoidDestroyer::StaticClass(); \
	UVariablePerParticleGravity::StaticClass(); \
	UTriForce::StaticClass(); \
	UTriangleForce::StaticClass(); \
	UTarpCollider::StaticClass(); \
	USpringLocator::StaticClass(); \
	ULocatorForce::StaticClass(); \
	USpringForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUSpringForceNative; \
	USlipForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUSlipForceNative; \
	URotationGrouped::StaticClass(); \
	URotationForce::StaticClass(); \
	URigidBody::StaticClass(); \
	UResizeForce::StaticClass(); \
	URepulsionForce::StaticClass(); \
	UPerParticleGravity::StaticClass(); \
	UPerParticleFriction::StaticClass(); \
	UParticleSalamanderForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUParticleSalamanderForceNative; \
	UOscillatingPerParticleForce::StaticClass(); \
	UOnDestroyForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUOnDestroyForceNative; \
	UNeuralNetForce::StaticClass(); \
	UMultiTemplateForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUMultiTemplateForceNative; \
	UMoveZig::StaticClass(); \
	UMeshAnchor::StaticClass(); \
	UMaxVelocityForce::StaticClass(); \
	ULocationGrouped::StaticClass(); \
	ULimitedResizeForce::StaticClass(); \
	UInertiaForce::StaticClass(); \
	UGlobalAccelerator::StaticClass(); \
	UGeometryColliderEx::StaticClass(); \
	UGeometryCollider::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUGeometryColliderNative; \
	UGeoCollideAndMerge::StaticClass(); \
	UFrictionForce::StaticClass(); \
	UFadeOutForce::StaticClass(); \
	UFadeInForce::StaticClass(); \
	UFadeForce::StaticClass(); \
	UDestroyOnDamage::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUDestroyOnDamageNative; \
	UMinDecayForce::StaticClass(); \
	UDecayForce::StaticClass(); \
	UColorForce::StaticClass(); \
	UCollisionSphereForce::StaticClass(); \
	UCollisionDiscForce::StaticClass(); \
	UBoneLocatorForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUBoneLocatorForceNative; \
	UBlowerForce::StaticClass(); \
	UAttractionForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUAttractionForceNative; \
	UAnchorForce::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsUAnchorForceNative; \
	UActorCollisionNotifier::StaticClass(); \
	AParticleColliderSphere::StaticClass(); \
	AParticleColliderDisc::StaticClass(); \
	AParticleBlower::StaticClass(); \
	AParticleGenerator::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsAParticleGeneratorNative; \
	AParticleAffector::StaticClass(); \
	UTarpBuilderTemplate::StaticClass(); \
	UPulseLineTemplate::StaticClass(); \
	UBendiBeamTemplate::StaticClass(); \
	ATarpBuilder::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsATarpBuilderNative; \
	ABendiBeamGenerator::StaticClass(); \
	APulseLineGenerator::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsAPulseLineGeneratorNative; \
	AParticleSkeleton::StaticClass(); \
	AParticleSalamander::StaticClass(); \
	AParticleRef::StaticClass(); \
	AParticleRadiator::StaticClass(); \
	ALineManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsALineManagerNative; \
	AElectricGenerator::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindParticleSystemsAElectricGeneratorNative; \
	ABarbbieHareDesigner::StaticClass(); \

#endif // ParticleSystems_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UForce) GParticleSystemsUForceNatives[] = 
{ 
	MAP_NATIVE(UForce,execRemoveExternalTemplate)
	MAP_NATIVE(UForce,execAddExternalTemplate)
	MAP_NATIVE(UForce,execRemoveTemplate)
	MAP_NATIVE(UForce,execAddTemplate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UForce);

NATIVE_INFO(USpringForce) GParticleSystemsUSpringForceNatives[] = 
{ 
	MAP_NATIVE(USpringForce,execSetEndpoints)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,USpringForce);

NATIVE_INFO(USlipForce) GParticleSystemsUSlipForceNatives[] = 
{ 
	MAP_NATIVE(USlipForce,execSetEndpoints)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,USlipForce);

NATIVE_INFO(UParticleSalamanderForce) GParticleSystemsUParticleSalamanderForceNatives[] = 
{ 
	MAP_NATIVE(UParticleSalamanderForce,execAddForceTemplate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UParticleSalamanderForce);

NATIVE_INFO(UOnDestroyForce) GParticleSystemsUOnDestroyForceNatives[] = 
{ 
	MAP_NATIVE(UOnDestroyForce,execAddDestroyTemplate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UOnDestroyForce);

NATIVE_INFO(UMultiTemplateForce) GParticleSystemsUMultiTemplateForceNatives[] = 
{ 
	MAP_NATIVE(UMultiTemplateForce,execAttachTemplate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UMultiTemplateForce);

NATIVE_INFO(UGeometryCollider) GParticleSystemsUGeometryColliderNatives[] = 
{ 
	MAP_NATIVE(UGeometryCollider,execAddImpactEffect)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UGeometryCollider);

NATIVE_INFO(UDestroyOnDamage) GParticleSystemsUDestroyOnDamageNatives[] = 
{ 
	MAP_NATIVE(UDestroyOnDamage,execNotify)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UDestroyOnDamage);

NATIVE_INFO(UBoneLocatorForce) GParticleSystemsUBoneLocatorForceNatives[] = 
{ 
	MAP_NATIVE(UBoneLocatorForce,execSetParticle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UBoneLocatorForce);

NATIVE_INFO(UAttractionForce) GParticleSystemsUAttractionForceNatives[] = 
{ 
	MAP_NATIVE(UAttractionForce,execSetEndpoints)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UAttractionForce);

NATIVE_INFO(UAnchorForce) GParticleSystemsUAnchorForceNatives[] = 
{ 
	MAP_NATIVE(UAnchorForce,execSetParticle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,UAnchorForce);

NATIVE_INFO(AParticleGenerator) GParticleSystemsAParticleGeneratorNatives[] = 
{ 
	MAP_NATIVE(AParticleGenerator,execParticleSetVelocity)
	MAP_NATIVE(AParticleGenerator,execParticleGetVelocity)
	MAP_NATIVE(AParticleGenerator,execParticleSetLocation)
	MAP_NATIVE(AParticleGenerator,execParticleGetLocation)
	MAP_NATIVE(AParticleGenerator,execManualTick)
	MAP_NATIVE(AParticleGenerator,execGetMaxLifeSpan)
	MAP_NATIVE(AParticleGenerator,execUnRegisterExternallyAffectedTemplates)
	MAP_NATIVE(AParticleGenerator,execRegisterExternallyAffectedTemplates)
	MAP_NATIVE(AParticleGenerator,execValidateComponents)
	MAP_NATIVE(AParticleGenerator,execUnLockParticles)
	MAP_NATIVE(AParticleGenerator,execLockParticles)
	MAP_NATIVE(AParticleGenerator,execClean)
	MAP_NATIVE(AParticleGenerator,execExchangeTemplate)
	MAP_NATIVE(AParticleGenerator,execDuplicate)
	MAP_NATIVE(AParticleGenerator,execConform)
	MAP_NATIVE(AParticleGenerator,execGetParticleTemplates)
	MAP_NATIVE(AParticleGenerator,execRemoveTemplateType)
	MAP_NATIVE(AParticleGenerator,execRemoveTemplate)
	MAP_NATIVE(AParticleGenerator,execAddTemplate)
	MAP_NATIVE(AParticleGenerator,execRemoveForceType)
	MAP_NATIVE(AParticleGenerator,execRemoveForce)
	MAP_NATIVE(AParticleGenerator,execAddForce)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,AParticleGenerator);

NATIVE_INFO(ATarpBuilder) GParticleSystemsATarpBuilderNatives[] = 
{ 
	MAP_NATIVE(ATarpBuilder,execAttachTo)
	MAP_NATIVE(ATarpBuilder,execBuild)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,ATarpBuilder);

NATIVE_INFO(APulseLineGenerator) GParticleSystemsAPulseLineGeneratorNatives[] = 
{ 
	MAP_NATIVE(APulseLineGenerator,execUpdateRenderBoundingBox)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,APulseLineGenerator);

NATIVE_INFO(ALineManager) GParticleSystemsALineManagerNatives[] = 
{ 
	MAP_NATIVE(ALineManager,execAddLinePS)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,ALineManager);

NATIVE_INFO(AElectricGenerator) GParticleSystemsAElectricGeneratorNatives[] = 
{ 
	MAP_NATIVE(AElectricGenerator,execGetTriLocation)
	MAP_NATIVE(AElectricGenerator,execGetFacingTriIndex)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(ParticleSystems,AElectricGenerator);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UWetWindshildParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(USpriteParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UViewVelocityScaledParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UTriParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UTriangleParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UTexturedStreakParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UStreakParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UStrandParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(USprite3DParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(URotatingParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(URecursiveParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UPointParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(UParticleDecalTemplate)
VERIFY_CLASS_SIZE_NODIE(ULineManagerTemplate)
VERIFY_CLASS_SIZE_NODIE(UActorParticleTemplate)
VERIFY_CLASS_SIZE_NODIE(ANewWind)
VERIFY_CLASS_SIZE_NODIE(UWindForce)
VERIFY_CLASS_SIZE_NODIE(UForce)
VERIFY_CLASS_SIZE_NODIE(UVoidDestroyer)
VERIFY_CLASS_SIZE_NODIE(UVariablePerParticleGravity)
VERIFY_CLASS_SIZE_NODIE(UTriForce)
VERIFY_CLASS_SIZE_NODIE(UTriangleForce)
VERIFY_CLASS_SIZE_NODIE(UTarpCollider)
VERIFY_CLASS_SIZE_NODIE(USpringLocator)
VERIFY_CLASS_SIZE_NODIE(ULocatorForce)
VERIFY_CLASS_SIZE_NODIE(USpringForce)
VERIFY_CLASS_SIZE_NODIE(USlipForce)
VERIFY_CLASS_SIZE_NODIE(URotationGrouped)
VERIFY_CLASS_SIZE_NODIE(URotationForce)
VERIFY_CLASS_SIZE_NODIE(URigidBody)
VERIFY_CLASS_SIZE_NODIE(UResizeForce)
VERIFY_CLASS_SIZE_NODIE(URepulsionForce)
VERIFY_CLASS_SIZE_NODIE(UPerParticleGravity)
VERIFY_CLASS_SIZE_NODIE(UPerParticleFriction)
VERIFY_CLASS_SIZE_NODIE(UParticleSalamanderForce)
VERIFY_CLASS_SIZE_NODIE(UOscillatingPerParticleForce)
VERIFY_CLASS_SIZE_NODIE(UOnDestroyForce)
VERIFY_CLASS_SIZE_NODIE(UNeuralNetForce)
VERIFY_CLASS_SIZE_NODIE(UMultiTemplateForce)
VERIFY_CLASS_SIZE_NODIE(UMoveZig)
VERIFY_CLASS_SIZE_NODIE(UMeshAnchor)
VERIFY_CLASS_SIZE_NODIE(UMaxVelocityForce)
VERIFY_CLASS_SIZE_NODIE(ULocationGrouped)
VERIFY_CLASS_SIZE_NODIE(ULimitedResizeForce)
VERIFY_CLASS_SIZE_NODIE(UInertiaForce)
VERIFY_CLASS_SIZE_NODIE(UGlobalAccelerator)
VERIFY_CLASS_SIZE_NODIE(UGeometryColliderEx)
VERIFY_CLASS_SIZE_NODIE(UGeometryCollider)
VERIFY_CLASS_SIZE_NODIE(UGeoCollideAndMerge)
VERIFY_CLASS_SIZE_NODIE(UFrictionForce)
VERIFY_CLASS_SIZE_NODIE(UFadeOutForce)
VERIFY_CLASS_SIZE_NODIE(UFadeInForce)
VERIFY_CLASS_SIZE_NODIE(UFadeForce)
VERIFY_CLASS_SIZE_NODIE(UDestroyOnDamage)
VERIFY_CLASS_SIZE_NODIE(UMinDecayForce)
VERIFY_CLASS_SIZE_NODIE(UDecayForce)
VERIFY_CLASS_SIZE_NODIE(UColorForce)
VERIFY_CLASS_SIZE_NODIE(UCollisionSphereForce)
VERIFY_CLASS_SIZE_NODIE(UCollisionDiscForce)
VERIFY_CLASS_SIZE_NODIE(UBoneLocatorForce)
VERIFY_CLASS_SIZE_NODIE(UBlowerForce)
VERIFY_CLASS_SIZE_NODIE(UAttractionForce)
VERIFY_CLASS_SIZE_NODIE(UAnchorForce)
VERIFY_CLASS_SIZE_NODIE(UActorCollisionNotifier)
VERIFY_CLASS_SIZE_NODIE(AParticleColliderSphere)
VERIFY_CLASS_SIZE_NODIE(AParticleColliderDisc)
VERIFY_CLASS_SIZE_NODIE(AParticleBlower)
VERIFY_CLASS_SIZE_NODIE(AParticleGenerator)
VERIFY_CLASS_SIZE_NODIE(AParticleAffector)
VERIFY_CLASS_SIZE_NODIE(UTarpBuilderTemplate)
VERIFY_CLASS_SIZE_NODIE(UPulseLineTemplate)
VERIFY_CLASS_SIZE_NODIE(UBendiBeamTemplate)
VERIFY_CLASS_SIZE_NODIE(ATarpBuilder)
VERIFY_CLASS_SIZE_NODIE(ABendiBeamGenerator)
VERIFY_CLASS_SIZE_NODIE(APulseLineGenerator)
VERIFY_CLASS_SIZE_NODIE(AParticleSkeleton)
VERIFY_CLASS_SIZE_NODIE(AParticleSalamander)
VERIFY_CLASS_SIZE_NODIE(AParticleRef)
VERIFY_CLASS_SIZE_NODIE(AParticleRadiator)
VERIFY_CLASS_SIZE_NODIE(ALineManager)
VERIFY_CLASS_SIZE_NODIE(AElectricGenerator)
VERIFY_CLASS_SIZE_NODIE(ABarbbieHareDesigner)
#endif // VERIFY_CLASS_SIZES
