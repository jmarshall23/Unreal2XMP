/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef U2_API
#define U2_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern U2_API FName U2_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(MantleBegin)
AUTOGENERATE_NAME(MantleEnd)
AUTOGENERATE_NAME(Show)
AUTOGENERATE_NAME(Hide)

#ifndef NAMES_ONLY


class U2_API ATeamMeshActor : public AStaticMeshActor
{
public:
    DECLARE_CLASS(ATeamMeshActor,AStaticMeshActor,0,U2)
    NO_DEFAULT_CONSTRUCTOR(ATeamMeshActor)
};

enum EFireAnimState
{
    FAS_None                =0,
    FAS_PlayOnce            =1,
    FAS_Looping             =2,
    FAS_Ready               =3,
    FAS_MAX                 =4,
};
enum ESurfaceType
{
    SFT_None                =0,
    SFT_Default             =1,
    SFT_Terrain             =2,
    SFT_Water               =3,
    SFT_MAX                 =4,
};
#define UCONST_MAXJUMPHEIGHT 94.0

class U2_API AU2Pawn : public APawn
{
public:
    FLOAT StaminaMax;
    FLOAT StaminaRechargeRate;
    FLOAT Stamina;
    BITFIELD bCanSprint:1 GCC_PACK(4);
    FLOAT SprintRatio GCC_PACK(4);
    FLOAT SprintCost;
    BITFIELD bSprinting:1 GCC_PACK(4);
    BITFIELD bCanDoubleJump:1;
    FLOAT JumpJetZ GCC_PACK(4);
    FLOAT JumpJetCost;
    FLOAT JumpJetDuration;
    class USound* JumpJetThrustSound;
    BITFIELD bDoubleJumping:1 GCC_PACK(4);
    FLOAT DoubleJumpStartSecs GCC_PACK(4);
    FLOAT SkillMax;
    FLOAT SkillRechargeRate;
    FLOAT SkillTeamEnergyCost;
    FLOAT Skill;
    FLOAT MantleHandsUpwardReach;
    FLOAT MantleHandsForwardReachMin;
    FLOAT MantleHandsForwardReachMax;
    FLOAT MantleMinHitNormalDeltaZ;
    FLOAT MantleSpeed;
    FLOAT MantleMaxStandingMantleHeight;
    INT MantleDebugLevel;
    class USound* MantleSound;
    class USound* MantleHurtSound;
    FLOAT MaxFallingMantleSpeed;
    FLOAT MaxRisingMantleSpeed;
    FVector MantleDestination;
    FLOAT NextCheckMantleTime;
    FLOAT MantleHeight;
    BITFIELD bMantling:1 GCC_PACK(4);
    class AActor* UsingActor GCC_PACK(4);
    BITFIELD bCanBeMercyKilled:1 GCC_PACK(4);
    INT RevivedHealth GCC_PACK(4);
    FLOAT ReviveCost;
    FLOAT HackRate;
    FLOAT HackCost;
    FStringNoInit DefaultPowerSuitName;
    FLOAT PowerSuitPower;
    FLOAT PowerSuitMax;
    FLOAT FlashbangTimer;
    class USound* FlashbangHum;
    BITFIELD bLastDamageWasHeadshot:1 GCC_PACK(4);
    FLOAT MaxPlayerIDDistance GCC_PACK(4);
    FStringNoInit ReviveMsg;
    FLOAT DeployProtectionTime;
    BYTE FireState;
    BYTE CurrentDir;
    FName MantleAnim GCC_PACK(4);
    class AParticleGenerator* JumpJetEffect;
    class AParticleGenerator* JumpJetA;
    class AParticleGenerator* JumpJetB;
    BYTE JumpJetIndex;
    BYTE LastJumpJetIndex;
    class AParticleRadiator* FlameEffect GCC_PACK(4);
    class AParticleRadiator* EMPEffect;
    class AParticleRadiator* ToxicEffect;
    class AParticleRadiator* FlameRadiator;
    class AParticleRadiator* EMPRadiator;
    class AParticleRadiator* ToxicRadiator;
    BYTE FlameIndex;
    BYTE LastFlameIndex;
    BYTE EMPIndex;
    BYTE LastEMPIndex;
    BYTE ToxicIndex;
    BYTE LastToxicIndex;
    BITFIELD bPlayOwnFootsteps:1 GCC_PACK(4);
    TArrayNoInit<class USound*> SoundFootstepsDefault GCC_PACK(4);
    TArrayNoInit<class USound*> SoundFootstepsTerrain;
    TArrayNoInit<class USound*> SoundFootstepsWater;
    TArrayNoInit<class USound*> SoundLandDefault;
    TArrayNoInit<class USound*> SoundLandTerrain;
    TArrayNoInit<class USound*> SoundLandWater;
    FLOAT FootstepVolume;
    FLOAT FootstepPitch;
    FLOAT LandVolume;
    FLOAT LandPitch;
    FLOAT MovementRadius;
    FLOAT MovementPitchVariancePercent;
    FLOAT MovementVolumeVariancePercent;
    FLOAT TimeBetweenFootSteps;
    FLOAT NextFootStepTime;
    FLOAT LastLandTime;
    DECLARE_CLASS(AU2Pawn,APawn,0|CLASS_Config,U2)
    #include "AU2Pawn.h"
};


class U2_API ADeploySpinner : public AMover
{
public:
    DECLARE_CLASS(ADeploySpinner,AMover,0,U2)
    NO_DEFAULT_CONSTRUCTOR(ADeploySpinner)
};

struct U2_API FWeaponInfo
{
    FStringNoInit WeaponName;
    BYTE Priority;
    class AWeapon* Weapon GCC_PACK(4);
};


struct AU2PlayerController_eventMantleEnd_Parms
{
};
struct AU2PlayerController_eventMantleBegin_Parms
{
};
class U2_API AU2PlayerController : public APlayerController
{
public:
    TArrayNoInit<FWeaponInfo> WeaponOrder1;
    TArrayNoInit<FWeaponInfo> WeaponOrder2;
    TArrayNoInit<FWeaponInfo> WeaponOrder3;
    TArrayNoInit<FWeaponInfo> WeaponOrder4;
    TArrayNoInit<FWeaponInfo> WeaponOrder5;
    BYTE UIAlpha;
    FLOAT AmmoFlashTime GCC_PACK(4);
    FLOAT WoundedDelaySeconds;
    FLOAT WoundedTime;
    class ADeploymentPoint* RespawnPoint;
    FLOAT NextDeployTime;
    FLOAT LastGestureTime;
    class UFont* MessageFont;
    class USound* SaySound;
    class USound* TeamSaySound;
    class UClass* VM_MedicMsg;
    class UClass* VM_RepairsMsg;
    class UClass* VM_SuppliesMsg;
    class UClass* VM_HackerMsg;
    class UClass* VM_OffenseMsg;
    class UClass* VM_BackupMsg;
    class UClass* VM_DefenseMsg;
    class UClass* VM_FollowMsg;
    class UClass* VM_BaseMsg;
    class UClass* VM_GeneratorMsg;
    class UClass* VM_ArtifactMsg;
    class UClass* VM_AllClearMsg;
    class UClass* VM_ThanksMsg;
    class UClass* VM_SorryMsg;
    class UClass* VM_NoProblemMsg;
    class UClass* VM_AcknowledgedMsg;
    class UMaterial* UseProjectorMaterial;
    class UMaterial* UseHighlightMaterial;
    FLOAT LastPlayerFragTime;
    INT MonsterKills;
    void eventMantleEnd()
    {
        ProcessEvent(FindFunctionChecked(U2_MantleEnd),NULL);
    }
    void eventMantleBegin()
    {
        ProcessEvent(FindFunctionChecked(U2_MantleBegin),NULL);
    }
    DECLARE_CLASS(AU2PlayerController,APlayerController,0|CLASS_Config,U2)
    #include "AU2PlayerController.h"
};

struct U2_API FHolderInfoT
{
    class UClass* Class;
    BITFIELD bHasArtifact:1 GCC_PACK(4);
};

#define UCONST_MaxHolders 4

class U2_API AIconNode : public ABreakableItem
{
public:
    INT TeamIndex;
    FHolderInfoT HolderInfo[4];
    class AArtifactHolder* Holders[4];
    FVector HolderLocOffsets[4];
    FRotator HolderRotOffsets[4];
    FLOAT TouchingHeight;
    FLOAT TouchingRadius;
    class ACollisionProxy* TouchingCollisionProxy;
    TArrayNoInit<class UStaticMesh*> ExtraStaticMeshes;
    TArrayNoInit<FVector> ExtraMeshLocations;
    class USound* ArtifactStolenSound;
    class USound* ArtifactDeniedSound;
    class USound* IconNodeShutdownSound;
    class USound* IconNodeActivateSound;
    BITFIELD bShutdown:1 GCC_PACK(4);
    DECLARE_CLASS(AIconNode,ABreakableItem,0,U2)
	virtual void PostBeginPlay();
	void SetupExtraMeshes();
};

#define UCONST_MaxTeams 4

class U2_API AHackTrigger : public AActor
{
public:
    BITFIELD bKeepProgress:1 GCC_PACK(4);
    BITFIELD bIgnoreAlreadyHacked:1;
    BITFIELD bTriggerTeam:1;
    FLOAT TotalHackSeconds GCC_PACK(4);
    FStringNoInit Description;
    FLOAT DecayRate;
    INT Team;
    class USound* HackStartSound;
    class USound* HackAmbientSound;
    class USound* HackCompletedSound;
    class USound* AlreadyHackedSound;
    class UClass* HackGainedMessage;
    class UClass* HackLostMessage;
    FLOAT TeamProgress[4];
    TArrayNoInit<class AController*> Users;
    TArrayNoInit<FLOAT> UserProgress;
    DECLARE_CLASS(AHackTrigger,AActor,0,U2)
    NO_DEFAULT_CONSTRUCTOR(AHackTrigger)
};


class U2_API ADeploymentPoint : public AHackTrigger
{
public:
    class AActor* Camera;
    INT SpawnerCount;
    FVector SpawnerLocationOffset;
    class ADeploymentPoint* nextDeploymentPoint;
    TArrayNoInit<class APlayerStart*> Spawners;
    TArrayNoInit<FLOAT> LastSpawnTimes;
    TArrayNoInit<INT> FailedSpawnAttempts;
    TArrayNoInit<class AParticleGenerator*> SpawnEffectClasses;
    class AParticleGenerator* SpawnEffect;
    FLOAT SpawnEffectsDelay;
    INT SpawnEffectTeam;
    FLOAT RespawnDelayPct;
    FLOAT NextRespawnTime;
    class UStaticMesh* BaseStaticMesh;
    INT BaseRepSkinIndex;
    TArrayNoInit<class UMaterial*> BaseTeamSkins;
    class ATeamMeshActor* Base;
    FLOAT SpinLeadInTime;
    class ADeploySpinner* Wings;
    BITFIELD bSpinning:1 GCC_PACK(4);
    BITFIELD ServerSpawnEffectRequest:1;
    BITFIELD ClientSpawnEffectRequest:1;
    DECLARE_CLASS(ADeploymentPoint,AHackTrigger,0,U2)
	virtual void PostBeginPlay();
	virtual void PostEditChange();
	void SetupPlayerStarts();
	void SetupExtraMeshes();
};

#define UCONST_UnknownID "??"
#define UCONST_Sep "_"
#define UCONST_UnHilitePrefix "UnHiliteWeapon"
#define UCONST_HilitePrefix "HiliteWeapon"
#define UCONST_RemovePrefix "RemoveWeapon"
#define UCONST_AddPrefix "AddWeapon"
#define UCONST_UnHiliteAllEvent "UnHiliteAllWeapons"
#define UCONST_HiliteAllEvent "HiliteAllWeapons"
#define UCONST_RemoveAllEvent "RemoveAllWeapons"
#define UCONST_AddAllEvent "AddAllWeapons"
#define UCONST_HideTrayEvent "HideWeaponTray"
#define UCONST_ShowTrayEvent "ShowWeaponTray"
#define UCONST_HidePanelEvent "HideWeaponPanel"
#define UCONST_ShowPanelEvent "ShowWeaponPanel"

struct UWeaponPanel_eventHide_Parms
{
};
struct UWeaponPanel_eventShow_Parms
{
};
class U2_API UWeaponPanel : public UUIHelper
{
public:
    BITFIELD bShown:1 GCC_PACK(4);
    BYTE bTrayShown[6] GCC_PACK(4);
    FLOAT TimeShownMax GCC_PACK(4);
    FLOAT TimeShown;
    void eventHide()
    {
        ProcessEvent(FindFunctionChecked(U2_Hide),NULL);
    }
    void eventShow()
    {
        ProcessEvent(FindFunctionChecked(U2_Show),NULL);
    }
    DECLARE_CLASS(UWeaponPanel,UUIHelper,0,U2)
    #include "UWeaponPanel.h"
};

#endif


#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef U2_NATIVE_DEFS
#define U2_NATIVE_DEFS

DECLARE_NATIVE_TYPE(U2,UWeaponPanel);
DECLARE_NATIVE_TYPE(U2,AHackTrigger);
DECLARE_NATIVE_TYPE(U2,ATeamMeshActor);
DECLARE_NATIVE_TYPE(U2,ADeploySpinner);
DECLARE_NATIVE_TYPE(U2,AU2PlayerController);
DECLARE_NATIVE_TYPE(U2,AU2Pawn);
DECLARE_NATIVE_TYPE(U2,AIconNode);
DECLARE_NATIVE_TYPE(U2,ADeploymentPoint);

#define AUTO_INITIALIZE_REGISTRANTS_U2 \
	UWeaponPanel::StaticClass(); \
	AHackTrigger::StaticClass(); \
	ATeamMeshActor::StaticClass(); \
	ADeploySpinner::StaticClass(); \
	AU2PlayerController::StaticClass(); \
	AU2Pawn::StaticClass(); \
	AIconNode::StaticClass(); \
	ADeploymentPoint::StaticClass(); \

#endif // U2_NATIVE_DEFS

#ifdef NATIVES_ONLY
#endif // NATIVES_ONLY
#endif // __STATIC_LINK

#ifdef VERIFY_CLASS_SIZES
VERIFY_CLASS_SIZE_NODIE(UWeaponPanel)
VERIFY_CLASS_SIZE_NODIE(AHackTrigger)
VERIFY_CLASS_SIZE_NODIE(ATeamMeshActor)
VERIFY_CLASS_SIZE_NODIE(ADeploySpinner)
VERIFY_CLASS_SIZE_NODIE(AU2PlayerController)
VERIFY_CLASS_SIZE_NODIE(AU2Pawn)
VERIFY_CLASS_SIZE_NODIE(AIconNode)
VERIFY_CLASS_SIZE_NODIE(ADeploymentPoint)
#endif // VERIFY_CLASS_SIZES
